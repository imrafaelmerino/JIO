package jio.test.stub;

import static java.util.Objects.requireNonNull;

import fun.gen.Gen;
import java.time.Duration;
import java.util.function.Supplier;
import jio.IO;
import jio.Lambda;

/**
 * A builder for building `IO` stubs instances using generators of IO effects. class, where delays and failures can be
 * produced based on the call number to the generator. Generators are composable using the `Combinators` class.
 * <p>
 * Example of generating `IO` instances with generators and composition:
 * <pre>
 * {@code
 * var gen1 = Gen.seq(IO::succeed);
 * var gen2 = Gen.cons(IO.fail(new RuntimeException("bad luck!")));
 * var gen = Combinators.oneOf(gen1, gen2);
 * }
 * </pre>
 * <p>
 *
 * @param <GenValue> The type of value generated by the stub.
 * @see Gen
 * @see fun.gen.Combinators
 */
public final class StubBuilder<GenValue> implements Supplier<IO<GenValue>> {

  private final Gen<IO<GenValue>> gen;
  private Gen<Duration> delayGen;

  private StubBuilder(final Gen<IO<GenValue>> gen) {
    this.gen = gen;
  }

  /**
   * Creates a new stub using the provided generator of IO effects.
   *
   * @param gen        The generator for creating `IO` instances.
   * @param <GenValue> The type of value to generate.
   * @return A new stub instance.
   */
  public static <GenValue> StubBuilder<GenValue> ofGen(final Gen<IO<GenValue>> gen) {
    return new StubBuilder<>(requireNonNull(gen));
  }

  /**
   * Creates a new stub using the provided generator of values.
   *
   * @param gen        The generator for creating values of type O
   * @param <GenValue> The type of value to generate.
   * @return A new stub instance.
   */
  public static <GenValue> StubBuilder<GenValue> ofSucGen(final Gen<GenValue> gen) {
    return new StubBuilder<>(requireNonNull(gen).map(IO::succeed));
  }

  /**
   * Sets the generator of delays
   *
   * @param delaysGen the generator of delays
   * @return this stub builder with a delay generator
   */
  public StubBuilder<GenValue> withDelays(final Gen<Duration> delaysGen) {
    this.delayGen = requireNonNull(delaysGen);
    return this;
  }

  /**
   * Generates an `IO` stub using the specified generator and settings.
   *
   * @return The generated `IO` stub instance.
   */

  @Override
  public IO<GenValue> get() {
    Lambda<IO<GenValue>, GenValue> delay = it -> delayGen == null ? it : IO.lazy(delayGen.sample())
                                                                           .then(it::sleep);
    return IO.lazy(gen.sample())
             .then(delay);
  }
}
