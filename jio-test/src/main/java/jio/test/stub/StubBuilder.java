package jio.test.stub;

import fun.gen.Gen;
import jio.IO;
import jio.Lambda;

import java.time.Duration;
import java.util.concurrent.Executor;

import static java.util.Objects.requireNonNull;

/**
 * A builder for building `IO` stubs instances using generators. Some useful generators are defined in the {@link Gens}
 * class, where delays and failures can be produced based on the call number to the generator. Generators are composable
 * using the `Combinators` class.
 * <p>
 * Example of generating `IO` instances with generators and composition:
 * <pre>
 * {@code
 * var gen1 = Gens.seq(n -> IO.succeed(n));
 * var gen2 = Gens.fail(new RuntimeException("bad luck!"));
 * var gen = Combinators.oneOf(gen1, gen2);
 * }
 * </pre>
 * <p>
 * This class allows you to generate `IO` instances with various generators and customize their behavior. You can also
 * specify an executor using the {@link #withExecutor(Executor)} method for handling asynchronous IO operations.
 *
 * @param <O> The type of value generated by the stub.
 * @see Gens
 * @see Gen
 * @see fun.gen.Combinators
 */
public final class StubBuilder<O> {

    private final Gen<IO<O>> gen;
    private Executor executor;

    private Gen<Duration> delayGen;

    private StubBuilder(final Gen<IO<O>> gen) {
        this.gen = gen;
    }

    /**
     * Creates a new stub using the provided generator of IO effects.
     *
     * @param gen The generator for creating `IO` instances.
     * @param <O> The type of value to generate.
     * @return A new stub instance.
     */
    public static <O> StubBuilder<O> ofIOGen(final Gen<IO<O>> gen) {
        return new StubBuilder<>(requireNonNull(gen));
    }


    /**
     * Creates a new stub using the provided generator of values.
     *
     * @param gen The generator for creating values of type O
     * @param <O> The type of value to generate.
     * @return A new stub instance.
     */
    public static <O> StubBuilder<O> ofGen(final Gen<O> gen) {
        return new StubBuilder<>(Gens.lift(gen));
    }

    /**
     * Sets the executor for this stub. The executor is used for asynchronous IO operations. Use this method when you
     * want to customize the executor used by the generated `IO` instances.
     *
     * @param executor The executor to be used for asynchronous operations.
     * @return This stub instance with the executor set.
     */
    public StubBuilder<O> withExecutor(Executor executor) {
        this.executor = requireNonNull(executor);
        return this;
    }


    /**
     * Sets the generator of delays
     * @param delaysGen the generator of delays
     * @return this stub builder with a delay generator
     */
    public StubBuilder<O> withDelays(final Gen<Duration> delaysGen) {
        this.delayGen = requireNonNull(delaysGen);
        return this;
    }


    /**
     * Generates an `IO` stub using the specified generator and settings.
     *
     * @return The generated `IO` stub instance.
     */

    public IO<O> build() {
        Lambda<IO<O>, O> delay = it -> delayGen == null ? it : IO.lazy(delayGen.sample()).then(it::sleep);
        return executor == null ?
                IO.lazy(gen.sample()).then(delay) :
                IO.lazy(gen.sample(), executor).then(delay);
    }
}
