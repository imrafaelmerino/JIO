package jio.test.stub;

import fun.gen.Gen;
import jio.IO;

import java.util.Objects;
import java.util.function.Supplier;


/**
 * A stub for generating `IO` instances using generators. Some useful generators are defined in the {@link Gens} class,
 * where delays and failures can be produced based on the call number to the generator. Generators are composable using
 * the `Combinators` class.
 * <p>
 * Example of generating `IO` instances with generators and composition:
 * <pre>
 * {@code
 * var gen1 = Gens.seq(n -> IO.succeed(n));
 * var gen2 = Gens.fail(new RuntimeException("bad luck!"));
 * var gen = Combinators.oneOf(gen1, gen2);
 * }
 * </pre>
 *
 * @param <O> The type of value generated by the stub.
 * @see Gens
 * @see Gen
 * @see fun.gen.Combinators
 */
public class StubSupplier<O> implements Supplier<IO<O>> {

    private final Gen<IO<O>> gen;

    private StubSupplier(final Gen<IO<O>> gen) {
        this.gen = gen;
    }

    /**
     * Creates a new stub using the provided generator.
     *
     * @param gen The generator for creating `IO` instances.
     * @param <O> The type of value to generate.
     * @return A new stub instance.
     */
    public static <O> StubSupplier<O> ofGen(final Gen<IO<O>> gen) {
        return new StubSupplier<>(Objects.requireNonNull(gen));
    }

    /**
     * Generates an `IO` instance using the specified generator, allowing for lazy execution and composition.
     *
     * @return The generated `IO` instance.
     */
    @Override
    public IO<O> get() {
        return IO.lazy(gen.sample()).then(it -> it);
    }
}

