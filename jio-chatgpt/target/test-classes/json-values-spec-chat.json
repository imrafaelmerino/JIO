[
  {
    "role": "system",
    "content": "You are a Java developer!"
  },

  {
    "role": "user",
    "content": "I'll introduce json-specs from the Java library json-values to you. json-specs is for validating JSON."
  },

  {
    "role": "assistant",
    "content": "I'm familiar with JSON and its usage in Java. Please go ahead and present json-spec in json-values."
  },

  {
    "role": "user",
    "content": "I'll provide examples of JSON specifications and their corresponding implementations with json-spec in the following format:\n\nSpecification {{n}}\n\"\"\"\n{{Specification}}\n\"\"\"\n\nSpec {{n}}\n```\n{{spec}}\n```\n\nThe static method `JsObjSpec.of` creates a JSON validation spec\nby providing a list of key-spec pairs. A spec is represented by the `JsSpec` class and\ncan be either a `JsObjSpec` or a spec created with the static methods from the `JsSpecs`\nclass: `str()`, `obj()`, `number()`, `integer()`, `longInteger()`,\n`bigInteger()`, `instant()`, `bool()`, `decimal()`, and `binary()`. A `JsSpec` doesn't\nallow null values by default. To allow null as a valid value you can use the method `nullable()`\nof the class `JsSpec`.\n\ndescription 1\n\"\"\"\nUsing json-values, create a JSON spec to validate a JSON object with the following fields:\n . `name` is a nullable string\n . `age` is an integer number\n . `is_vip` is a boolean\n . `birthdate` is a nullable date\n . `phone` is a JSON object with the keys type and number\n . `address` is a JSON object but not like phone, we don't know the name of the keys\n\n\"\"\"\n\nspec 1\n```\nJsObjSpec spec1 =  JsObjSpec.of(\"name\", JsSpecs.str().nullable(),\n                                \"age\", JsSpecs.integer(),\n                                \"is_vip\", JsSpecs.bool(),\n                                \"birthdate\", JsSpecs.instant().nullable(),\n                                \"phone\", JsObjSpec.of( \"type\",JsSpecs.str(),\n                                                      \"number\", JsSpecs.str())\n                                );\n```\n\ndescription 2\n\"\"\"\nUsing json-values, create a JSON spec to validate a JSON object with the following fields:\n . `photo` is an array of bytes (byte[])\n . `counter` is an long integer number\n . `grade` is a nullable decimal number\n\n\"\"\"\n\nspec 2\n```\nJsObjSpec spec2 =  JsObjSpec.of(\"photo\",JsSpecs.binary(),\n                                \"counter\",JsSpecs.longInteger(),\n                                \"grade\",JsSpecs.decimal().nullable()\n                                );\n```\n\n\nAnother essential aspect is that to ensure that each element of a JSON meet certain\nvalidation requirements, you can use Java predicates and pass them in as arguments\nof the static methods of the class `JsSpecs` described above.\n\nFind below some examples where a specification is defined and a spec to meet that\nspecification is provided.\n\ndescription 3\n\"\"\"\nUsing json-values, create a JSON spec to validate a JSON object with the following fields:\n . `age` is a positive integer greater than zero\n . `name` is a none blank string of length between 3 and 50\n . `birthdate` is a date after the Linux Epoch time\n . `address` is an object with at least three fields\n\"\"\"\n\nspec 3\n```\nJsObjSpec spec3 =  JsObjSpec.of(\"age\",JsSpecs.integer(n -> n > 0),\n                                \"name\",JsSpecs.str( s -> !s.isBlank() && s.length() < 50 && s.length() > 3),\n                                \"birthdate\",JsSpecs.instant(i -> i.isAfter(Instant.EPOCH))\n                                \"address\", JsSpecs.obj(o -> o.size() >= 3) \n                                );\n```\n\njson-values allows you to tailor validation criteria to your needs.\n\nYou can also ensure that a value is an array and each element has the specified type. For example:\n. `JsSpecs.array()`:  ensures that the value is an array\n. `JsSpecs.arrayOfBigInt()`: ensures that the value is an array of big integers\n. `JsSpecs.arrayOfDec()`: ensures that the value is an array of big decimals\n. `JsSpecs.arrayOfInt()`: ensures that the value is an array of integers\n. `JsSpecs.arrayOfLong()`: ensures that the value is an array of long numbers\n. `JsSpecs.arrayOfNumber()`: ensures that the value is an array of numbers\n. `JsSpecs.arrayOfObj()`: ensures that the value is an array of JSON objects\n. `JsSpecs.arrayOfStr()`: ensures that the value is an array of strings\n. `JsSpecs.arrayOfBool()`: ensures that the value is an array of booleans\n\nFind below some examples where a specification is defined and a spec to meet that\nspecification is provided.\n\ndescription 4\n\"\"\"\nUsing json-values, create a JSON spec to validate a JSON object with the following fields:\n . `fruits` is an array of string\n . `rating_stars` is an array of integer numbers\n . `grades` is an array of decimal numbers\n\n\"\"\"\n\nspec 4\n```\nJsObjSpec spec4 =  JsObjSpec.of(\"fruits\",JsSpecs.arrayOfStr(),\n                                \"rating_starts\",JsSpecs.arrayOfInt(),\n                                \"grades\",JsSpecs.arrayOfDec()\n                                );\n\n```\n\nYou can validate each array element by passing a predicate to the methods mentioned. You can also set the minimum and\nmaximum length of the array.\n\n description 5\n \"\"\"\n Using json-values, create a JSON spec to validate a JSON object with the following fields:\n  . `fruits` is an array of none empty strings. Length of the array between [1,10]\n  . `rating_stars` is an array of integer positive numbers\n  . `grades` is an array of positive decimal numbers\n\n \"\"\"\n\n spec 5\n ```\n JsObjSpec spec5 =  JsObjSpec.of(\"fruits\",JsSpecs.arrayOfStr((String s) -> !s.isEmpty(),1,10),\n                                 \"rating_starts\",JsSpecs.arrayOfInt((int n) -> n > 0),\n                                 \"grades\",JsSpecs.arrayOfDec((BigDecimal dec) -> dec.signum() > 0)\n                                 );\n\n ```\n\n\nYou can define the structure of each `JsObj` in a JSON object array by using the method\n`JsSpecs.arrayOfObjSpec(JsObjSpec)` for validation.\n\ndescription 6\n \"\"\"\n Using json-values, create a JSON spec to validate a JSON object with the following fields:\n  . `addresses` is an array of JSON object with the fields street and city (both a string)\n  . `phones` is an array of JSON object with the fields type and number (both a string)\n  . `data` is an array of JSON object which fields are unknown.\n \"\"\"\n\n spec 6\n ```\n JsObjSpec addressSpec = JsObjSpec.of(\"street\", JsSpecs.str(),\n                                      \"city\", JsSpecs.str()\n                                    );\n JsObjSpec phoneSpec = JsObjSpec.of(\"type\", JsSpecs.str(),\n                                    \"number\", JsSpecs.str()\n                                    );\n\n JsObjSpec spec6 =  JsObjSpec.of(\"addresses\", JsSpecs.arrayOfObjSpec(addressSpec),\n                                 \"phones\", JsSpecs.arrayOfObjSpec(phoneSpec),\n                                 \"data\", JsSpecs.arrayOfObj()\n                                );\n\n ```\n\nTuples are sequences of elements with varying types. They can be represented in JSON using\narrays. To create a specification for an n-tuple in JSON, use the\n`JsSpecs.tuple(spec1, spec2, ..., specN)` method.\n\ndescription 7\n \"\"\"\n Using json-values, create a JSON spec to validate a JSON object with the following fields:\n  . `coordinates` is a tuple of two decimal numbers.\n  . `name_age` is a tuple of two elements, a none-empty string and a positive number\n \"\"\"\n\n spec 7\n ```\n JsObjSpec spec7 = JsObjSpec.of(\"coordinates\",JsSpecs.tuple(JsSpecs.decimal(),\n                                                            JsSpecs.decimal()),\n                                \"name_age\",JsSpecs.tuple(JsSpec.str(s -> !s.empty()),\n                                                         JsSpecs.integer(n -> n > 0))\n                                );\n ```\n\nIn JSON, you can define map specs for JSON objects where all the values have the same type:\n`JsSpecs.mapOfArray()`, `JsSpecs.mapOfInteger()`, `JsSpecs.mapOfInt()`, `JsSpecs.mapOfLong()`,\n`JsSpecs.mapOfStr()`, `JsSpecs.mapOfObj()`, `JsSpecs.mapOfBool()`, `JsSpecs.mapOfInstant()`\nand `JsSpecs.mapOfDecimal()`.\n\n description 8\n  \"\"\"\n  Using json-values, create a JSON spec to validate a JSON object with the following fields:\n   . `vehicles` is a map of vehicles: the key is a string representing the make and the value is an integer representing the number of vehicles\n   . `birthdays` is a map of vehicles: the key is a string representing a person name and the value is a date representing their birthday\n  \"\"\"\n\n  spec 8\n  ```\n  JsObjSpec spec8 = JsObjSpec.of(\"coordinates\",JsSpecs.mapOfInteger(),\n                                 \"birthdays\",JsSpecs.mapOfInstant()\n                                 );\n  ```\n\njson-values offers useful specifications for:\n\n- Enumerations or enums: Use `JsSpecs.oneOf(List<JsValue>)` to ensure a value is contained within a specific set.\n- Constants: Use `JsSpecs.cons(JsValue value)` to enforce a constant value.\n- Any value: Use `JsSpecs.any()` to allow any value.\n- Condition-based values: Specify that a value must satisfy a given condition by providing a predicate to the `any` spec, such as `JsSpecs.any(Predicate<JsValue>)`.\n\n description 9\n  \"\"\"\n  Using json-values, create a JSON spec to validate a JSON object with the following fields:\n   . `sex` is an enum with two posible values: male or female\n   . `type` is a constant string: \"person\"\n   . `data` can be any value\n   . `creation_date` can be a string or a date\n  \"\"\"\n\n  spec 9\n  ```\n  JsObjSpec spec9 = JsObjSpec.of(\"sex\",JsSpecs.oneOf(List.of(JsStr.of(\"male\"), JsStr.of(\"female\"))),\n                                 \"type\",JsSpecs.cons(JsStr.of(\"person\")),\n                                 \"data\", JsSpecs.any(),\n                                 \"creation_date\",JsSpecs.any((JsValue value) -> value.isStr() || value.isInstant())\n                                 );\n  ```\n\nAll fields in a spec are required by default. If a field is not present in a JSON, the JSON\ndoes not conform to the spec. Optional fields can be specified using the withOptKeys(String... keys)\nmethod in the JsSpec class. If all fields are optional, the withAllOptKeys() method in the JsSpec\nclass can be used.\n\n description 10\n  \"\"\"\n  Using json-values, create a JSON spec to validate a JSON object with the following fields:\n   . `things`: optional array\n   . `image`:  optional and nullable binary\n   . `coordinates`: tuple of two decimals (latitude and longitude)\n\n  \"\"\"\n\n  spec 10\n  ```\n  long LAT_MIN = -90;\n  long LAT_MAX = 90;\n  long LON_MIN = -180;\n  long LON_MAX = 180;\n\n  BiFunction<Long, Long, Predicate<BigDecimal>> decBetween =\n        (min, max) -> n -> BigDecimal.valueOf(min).compareTo(n) < 0 &&\n                           BigDecimal.valueOf(max).compareTo(n) > 0;\n\n  Predicate<BigDecimal> latitudeSpec = decBetween.apply(LAT_MIN, LAT_MAX);\n\n  Predicate<BigDecimal> longitudeSpec = decBetween.apply(LON_MIN, LON_MAX);\n\n  JsObjSpec spec10 = JsObjSpec.of(\"things\",JsSpecs.array(),\n                                  \"image\",JsSpecs.binary().nullable(),\n                                  \"coordinates\", JsSpecs.tuple(JsSpecs.decimal(latitudeSpec),\n                                                               JsSpecs.decimal(longitudeSpec),\n                                                              ),\n                                 )\n                                 .withOptKeys(\"things\",\"image\");\n  ```\n\n\n description 11\n \"\"\"\n A JSON object with the field owner, that is a JSON object that includes the fields `name` and `address`, where `name` is a non-blank string with a maximum length of 100 characters,\n  and `address` includes fields `street`, `city`, `state`, and `zip`, where `street` and `city` are non-blank strings\n  with a maximum length of 100 characters, `state` is a non-blank string with a length of two,\n  and `zip` is a non-blank string with a length of five, and all five characters are digits.\n \"\"\"\n\n spec 11\n \"\"\"\n\n JsObjSpec spec11 = JsObjSpec.of(\"owner\", JsObjSpec.of(\"name\", JsSpecs.str(s -> !s.isBlank() && s.length() <= 100),\n                                     \"address\", JsObjSpec.of(\"street\", JsSpecs.str(s -> !s.isBlank() && s.length() <= 100),\n                                                             \"city\", JsSpecs.str(s -> !s.isBlank() && s.length() <= 100),\n                                                             \"state\", JsSpecs.str(s -> !s.isBlank() && s.length() <= 2),\n                                                             \"zip\", JsSpecs.str(s -> !s.isBlank() && s.length() == 5 && s.chars().allMatch(Character::isDigit))\n                                                             )\n                                     )\n              )\n\n \"\"\"\n\nimport"
  },

  {
    "role": "assistant",
    "content":"Yes, I can help you define JSON validation specs using json-values. Please go ahead\nand provide the descriptions for the specs you want to create, and I'll assist you\nin writing the corresponding specs."
  },

  {
    "role": "user",
    "content": "Write a `JsObjSpec` for a JSON that represents a movie."
  },

  {
    "role": "assistant",
    "content": "        JsObjSpec movieSpec = JsObjSpec.of(\n                \"title\", str(s -> !s.isBlank() && s.length() <= 100),\n                \"releaseYear\", integer(n -> n >= 1900 && n <= 2023),\n                \"durationMinutes\", integer(n -> n > 0 && n <= 1000),\n                \"genre\", oneOf(List.of(JsStr.of(\"ACTION\"), JsStr.of(\"DRAMA\"), JsStr.of(\"COMEDY\"), JsStr.of(\"THRILLER\"))),\n                \"directors\", arrayOfObjSpec(\n                        JsObjSpec.of(\n                                \"name\", str(s -> !s.isBlank() && s.length() <= 100),\n                                \"birthYear\", integer(n -> n >= 1900 && n <= 2023),\n                                \"nationality\", str(s -> !s.isBlank() && s.length() <= 100)\n                                    )\n                                           ),\n                \"cast\", arrayOfStr(s -> !s.isBlank() && s.length() <= 100),\n                \"rating\", decimal(d -> d.signum() > 0 && d.compareTo(BigDecimal.TEN) <= 0),\n                \"awards\", arrayOfObjSpec(\n                        JsObjSpec.of(\n                                \"name\", str(s -> !s.isBlank() && s.length() <= 100),\n                                \"year\", integer(n -> n >= 1900 && n <= 2023)\n                                    )\n                                        ),\n                \"isReleased\", bool()\n                                          );"
  }
]